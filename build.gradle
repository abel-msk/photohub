plugins {
    id "org.springframework.boot" version '1.5.9.RELEASE'
}
//import org.apache.tools.ant.filters.ReplaceTokens
import org.apache.tools.ant.filters.*
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: 'war'

evaluationDependsOn(":data")
evaluationDependsOn(":connectors:connector-interface")
evaluationDependsOn(":connectors:connector-local")
evaluationDependsOn(":connectors:connector-google")
evaluationDependsOn(":services")


def propFile = new File("${rootProject.projectDir}/project.properties");
Properties props = new Properties()
props.load(new FileInputStream(propFile))

ext {
    projectVersion   = "1.0.0"

    rootDir          = "/Users/abel/Developing/photohub-root"

    //distsDirStr    = distsDir.getAbsolutePath()
    distribDirStr    = distsDir.getAbsolutePath()
    //projectRootStr =   project.rootDir.getAbsolutePath(); //new File(projectRootStr + '/install')

    userHome         = System.getProperty('user.home').toString()
    tmpDir           = System.getProperty('java.io.tmpdir')
    appClass         = "home.abel.photohub.webconfig.standalone.AppInit"

    appConfigFile    = "photohub-standalone.properties"
    appLogConfFile       = "logback.xml"
    defFolderImg     = "folder.png"
    //apiUrl         = "api"


    dbDriver         = 'org.hsqldb.jdbc.JDBCDriver'
    dbVendorPlatform = 'org.eclipse.persistence.platform.database.HSQLPlatform'
    dbVendorName     = 'HSQL'
    dbGenerate       = 'false'
    dbUrl            = 'jdbc:hsqldb:file:'
    //dbParams       = ';hsqldb.write_delay=false;hsqldb.tx=mvcc'
    dbParams         = ';hsqldb.tx=mvcc'
    dbUserName       =  'photohub'
    dbUserPasswd     =  'photohub'
    dbType           =  'hsqldb'   //  Нужно проверить

    localDistribRoot = distribDirStr + "/local"

    //   the path where to place all fronend js inside final jar
    //jsApiSrc       = "../photohub2-client2/build"
    staticDir        = project.buildDir.toString() + "classes/main/static"
    interfaceDistrDir = "${project.rootDir}" + '/web/build'
}

allprojects {
    apply plugin: 'java'
    //apply plugin: 'maven-publish'
    apply plugin: 'idea'

    compileJava.options.encoding = 'UTF-8'
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    ext {
        group = 'home.abel.photohub'
        version = '0.1.0'
        testdbDriver = 'org.hsqldb.jdbc.JDBCDriver'
        testdbVendorPlatform = 'org.eclipse.persistence.platform.database.HSQLPlatform'
        testdbVendorName = 'HSQL'
        testdbUrl = 'jdbc:hsqldb:file:'

        //testdbParams = ';hsqldb.tx=mvcc'
        testdbParams = ';hsqldb.tx=mvcc;hsqldb.write_delay=false'
        //testdbParams = ';hsqldb.tx=MVLOCKS;hsqldb.write_delay=false'
        //testdbParams = ';hsqldb.tx=LOCKS'
        //testdbParams = ''

        testdbGenerate = 'false'
        testdbName = System.getProperty('java.io.tmpdir') + "/ph-data/tb/photohub"
        testdbUserName = 'photohub'
        testdbUserPasswd = 'photohub'
    }
	//----------------------------------------------------------
	//   Dependent artifacts version
	//----------------------------------------------------------

    compileJava {
        doFirst {
            println "... Compile project ${project.name} ..."
        }
    }

    compileTestJava {
        doFirst {
            println "... Compile TEST for project ${project.name} ..."
        }
    }
}

//----------------------------------------------------------
//
//  Spring boot package
//
//----------------------------------------------------------
//sourceSets.main.output.resourcesDir = distribDirStr + "/config"

springBoot {
    backupSource = false
}

bootRepackage {
    mainClass = appClass
    executable = false
    withJarTask = jar
    //customConfiguration =
    //backupSource=false
}

//
//  Сборка всех необходимых файлов которые нужно включить в конечнй JAR
//  Add js aap to jar
//
jar {
    doFirst {
        println "Copy interface files from: "+interfaceDistrDir
    }
    destinationDir = new File(distribDirStr)
    archiveName = project.name + ".jar"

    exclude("**/photohub-standalone.properties")
    exclude("**/logback.xml")

//    into('static') {
//        from interfaceDistrDir
//    }
    into('static') {
        from (interfaceDistrDir) {
            exclude "/property.json"
        }
        eachFile { FileCopyDetails details ->
            println "add to jar :" + details.file
        }
    }
    into('static') {
        from (interfaceDistrDir) {
            include "/property.json"
            filter(ReplaceTokens, tokens: [
                    "api.url"         : "api/",
                    "api.version"      : projectVersion
            ])
        }

        eachFile { FileCopyDetails details ->
            println "add to jar :" + details.file
        }
    }
}

//----------------------------------------------------------
//
//   LOCAL INSTALL
//
//----------------------------------------------------------
def appHome          = rootDir.toString() + "/app"
def dbName           = rootDir.toString() + "/db/hsqldb/photohub"
//def localDBDir = userHome + "/Developing/photohub-root/db/photo-root"
def localThumbDir    = rootDir.toString() + "/db/photo-thumbnail"
def localConfigPath  = appHome.toString() + "/config"
def localDefaultsDir = appHome.toString() + "/config/defaults"
def localLogDir     = appHome.toString() + "/log"





task install {
    dependsOn 'prepareDistribution'
    dependsOn 'bootRepackage'
    doLast {
        println "Copy distribution package to $appHome"
        copy {
            from file(distribDirStr + "/" +  project.name + ".jar")
            into file(localDistribRoot+"/bin")
        }
        copy  {
            from localDistribRoot
            into appHome
        }
    }
}


//
//     Подготовка файлов ресурсов для repackage
//     Эти файлы не должны попавть внутр JAR файла
//

task prepareDistribution {
    //dependsOn 'processResources'
    inputs.dir project.sourceSets.main.resources.srcDirs
    //inputs.files fileTree(project.sourceSets.main.resources.srcDirs)
    outputs.dir localDistribRoot+"/bin"
    outputs.dir localDistribRoot+"/config"

    doLast {
        def logFolder = new File(localDistribRoot+"/log")
        logFolder.mkdirs()

        copy {
            into(localDistribRoot+"/bin")
            from( project.sourceSets.main.resources.srcDirs ) {
                include 'startup.sh'
                filter(ReplaceTokens, tokens: [
                    "app.home"         : appHome.toString(),
                    "archive.name"     : project.name,
                    "app.config.path"  : localConfigPath.toString(),
                    "app.config.file"  : appConfigFile,
                    "app.log.config"   : appLogConfFile
                ])
            }
        }
        copy {
            into(localDistribRoot+"/config")
            from( project.sourceSets.main.resources.srcDirs ) {
                include 'photohub-standalone.properties'
                include 'logback.xml'
                filter(ReplaceTokens, tokens: [
                        "app.home"          : appHome.toString(),
                        "user.home"         : userHome,
                        "app.log.path"      : localLogDir,
                        "db.name"           : dbName.toString(),
                        "db.thumbs"         : localThumbDir.toString(),
                        "db.defaults"       : localDefaultsDir.toString(),
                        "folder.img.name"   : defFolderImg,
                        "db.driver"         : dbDriver,
                        "db.vendor.platform": dbVendorPlatform,
                        "db.vendor.dbname"  : dbVendorName,
                        "db.url"            : dbUrl.toString(),
                        "db.params"         : dbParams,
                        'db.generate'       : dbGenerate,
                        "db.username"       : dbUserName,
                        "db.password"       : dbUserPasswd,
                        "database.type"     : dbType
                ])
            }
        }
        copy {
            into(localDistribRoot+"/config/defaults")
            from( project.sourceSets.main.resources.srcDirs ) {
                include 'folder.png'
            }
        }
    }
}


//----------------------------------------------------------
//
//  MACOSX PACKAGE
//
//----------------------------------------------------------


//def macosxPkgBuild = distsDir.getAbsolutePath() + "/macosx"
def macosxPkgBuild = '/tmp/pkgbuild'
def macosPkgRootDir = macosxPkgBuild + "/ROOT"
def macosPkgScriptsDir =  macosxPkgBuild + "/scripts"

def macosAppHomeDir = "/usr/local/photohub"
def macosBinDir = macosAppHomeDir + "/bin"
def macosConfDir = macosAppHomeDir + "/etc"
def macosCronDir = "/Library/LaunchDaemons"
def macosLogDir = macosAppHomeDir + "/var/log"
def macosDefaultsDir = macosAppHomeDir +  "/etc/include"

def macosInstalledRootDir = ""

def macosDBHomeDir =  macosAppHomeDir + "/data"
def macosDBDir = macosDBHomeDir + "/db/photohub"
def macosThumbDir = macosDBHomeDir + "/thumbs"
def macosPkgName  = "photohub.pkg"


task macospkg {
    dependsOn 'prePackage'
    dependsOn 'bootRepackage'

    doLast {
        copy {
            from (distribDirStr)
            {
                include  project.name + ".jar"
                fileMode 0644
                dirMode 0755
            }
            into (macosPkgRootDir + macosBinDir)
        }

        exec {
            commandLine '/bin/bash'
            args macosxPkgBuild + "/pkgmk.sh", macosPkgName
        }

        copy {
            from file (macosxPkgBuild + '/' + macosPkgName)
            into (distsDir.getAbsolutePath())
        }

        delete macosxPkgBuild

        exec {
            commandLine 'scp'
            args distsDir.getAbsolutePath().toString() + "/" + macosPkgName, 'abel@192.168.1.200:'
        }

        //println " !!! Package source  " + macosxPkgBuild + " !!!"
        println " !!! Create package file in " + distsDir.getAbsolutePath() + "/" +   macosPkgName + " !!!"
    }
}

task cleanPrePackege (type: Delete) {
    delete macosxPkgBuild
    //delete fileTree(dir: macosxPkgBuild)
}

task prePackage {

    dependsOn 'cleanPrePackege'
    project.sourceSets.main.java.srcDirs.each { File file ->
        inputs.dir file
    }

    //inputs.dir project.sourceSets.main.java.srcDirs
    project.sourceSets.main.resources.srcDirs.each { File file ->
        inputs.dir file
    }

    outputs.dir (macosPkgScriptsDir)
    outputs.dir (macosPkgRootDir + macosBinDir)
    outputs.dir (macosPkgRootDir + macosConfDir)
    outputs.dir (macosPkgRootDir + macosCronDir)
    outputs.dir (macosPkgRootDir + macosDefaultsDir)


    doLast {
        def logFolder = new File(macosPkgRootDir + macosLogDir)
        logFolder.mkdirs()

        copy {
            into(macosPkgRootDir + macosBinDir)
            from( project.sourceSets.main.resources.srcDirs ) {
                include 'startup.sh'
                fileMode 0755
                dirMode 0755
                filter(ReplaceTokens, tokens: [
                        "app.home"       : macosAppHomeDir,
                        "archive.name"   : project.name,
                        "app.config.path": macosConfDir,
                        "app.config.file": appConfigFile,
                        "app.log.config" : appLogConfFile,
                ])
            }
        }
        //
        //    Copy config files
        //
        copy {
            into(macosPkgRootDir + macosConfDir)
            from(project.sourceSets.main.resources.srcDirs) {
                include 'photohub-standalone.properties'
                include 'logback.xml'
                fileMode 0644
                dirMode 0755
                filter(ReplaceTokens, tokens: [
                        "app.home"          : macosAppHomeDir,
                        "app.log.path"      : macosLogDir,
                        "db.name"           : macosDBDir,
                        "db.thumbs"         : macosThumbDir,
                        "db.defaults"       : macosDefaultsDir,
                        "folder.img.name"   : defFolderImg,
                        "db.driver"         : dbDriver,
                        "db.vendor.platform": dbVendorPlatform,
                        "db.vendor.dbname"  : dbVendorName,
                        "db.url"            : dbUrl.toString(),
                        "db.params"         : dbParams,
                        'db.generate'       : dbGenerate,
                        "db.username"       : dbUserName,
                        "db.password"       : dbUserPasswd,
                        "database.type"     : dbType
                ])
            }
        }

        //
        //    Copy launchctl files
        //
        copy {
            into(macosPkgRootDir + macosCronDir)
            from(project.sourceSets.main.resources.srcDirs) {
                include 'home.abel.photohub.plist'
                fileMode 0644
                dirMode 0755
                filter(ReplaceTokens, tokens: [
                        "app.home"          : macosAppHomeDir,
                        "app.bin"           : macosBinDir,
                        "app.log"           : macosLogDir

                ])
            }
        }

        //
        //    Copy package scripts
        //
        copy {
            into(macosPkgScriptsDir)
            from(project.sourceSets.main.resources.srcDirs) {
                include 'postinstall'
                include 'preinstall'
                fileMode 0755
                dirMode 0755
//                permissionGroup = 'wheel'
//                user = 'root'
                filter(ReplaceTokens, tokens: [
                        "app.home"          : macosAppHomeDir,
                        "app.bin"           : macosBinDir,
                        "app.log"           : macosLogDir,
                        "app.cron"          : macosCronDir
                ])
            }
        }


        //
        //    Copy package build script
        //
        copy {
            into file (macosxPkgBuild)
            from(project.sourceSets.main.resources.srcDirs) {
                include 'pkgmk.sh'
                include 'photohub.plist'
                fileMode 0755
                dirMode 0755
//                permissionGroup = 'wheel'
//                user = 'root'
                filter(ReplaceTokens, tokens: [
                        "pkg.home"          : macosxPkgBuild,
                        "app.home"          : macosAppHomeDir,
                        "app.bin"           : macosBinDir,
                        "app.log"           : macosLogDir,
                        "app.cron"          : macosCronDir
                ])
            }
        }


        //
        //  Copy foldef default image
        //
        copy {
            into(macosPkgRootDir + macosDefaultsDir)
            from( project.sourceSets.main.resources.srcDirs ) {
                fileMode 0644
                dirMode 0755
//                permissionGroup = 'wheel'
//                user = 'root'
                include 'folder.png'
            }
        }
    }
}



//----------------------------------------------------------
//
//  Spring boot RUN
//
//----------------------------------------------------------

bootRun {
    addResources = false  //  неиспорльзовать ресурсы из исходников
}

//
//  bootRun будет использовать файлы ресурсов для конфигурации
//
//
processResources {
    include 'photohub-standalone.properties'
    include 'logback.xml'
    filter ReplaceTokens, tokens: [
        "app.home"          : appHome.toString(),
        "user.home"         : userHome,
        "db.name"           : dbName.toString(),
        "db.thumbs"         : localThumbDir.toString(),
        "db.defaults"       : localDefaultsDir.toString(),
        "folder.img.name"   : defFolderImg,
        "db.driver"         : dbDriver,
        "db.vendor.platform": dbVendorPlatform,
        "db.vendor.dbname"  : dbVendorName,
        "db.url"            : dbUrl.toString(),
        "db.params"         : dbParams,
        'db.generate'       : dbGenerate,
        "db.username"       : dbUserName,
        "db.password"       : dbUserPasswd,
        "database.type"     : dbType
    ]
}


//----------------------------------------------------------
//   REST API Testing
//----------------------------------------------------------

task copyTestDBData (type: Copy) {
    String srcFile = project(':services').sourceSets.test.getResources().getSrcDirs().getAt(0).absolutePath + "/db-test-data.xml";
    inputs.files srcFile
    outputs.dir sourceSets.test.getResources().getSrcDirs().getAt(0)
    from srcFile
    into sourceSets.test.getResources().getSrcDirs().getAt(0)
    doLast {
        println "... Get test db data file - " + srcFile;
        copy {
            from srcFile
            into sourceSets.test.getResources().getSrcDirs().getAt(0)
        }
    }
}

task cleanDB {
    doFirst {
        println "... Check and clean test DB = " + testdbName
        def testDBDir = new File(testdbName)
        testDBDir.getParentFile().deleteDir()
    }
}

test {
//    mustRunAfter(':data:test')
//    mustRunAfter(':image-processing:test')
//    mustRunAfter(':connectors:connector-interface:test')
//    mustRunAfter(':connectors:connector-local:test')
//    mustRunAfter(':services:test')

    testLogging.showStandardStreams = true

    dependsOn cleanDB
    dependsOn ':data:test'
    dependsOn ':image-processing:test'
    dependsOn ':connectors:connector-interface:test'
    dependsOn ':connectors:connector-local:test'
    dependsOn ':services:test'
    //mustRunAfter(cleanDB)

    filter {
        includeTestsMatching "*SiteTest"
    }
}
test.dependsOn cleanDB
test.dependsOn copyTestDBData


task testApi(type: Test, dependsOn: cleanDB ) {
    beforeTest { descriptor ->
        logger.lifecycle("Running test: $descriptor.className")
    }
    //testLogging.showStandardStreams = true   //  Используетмся для вывода debug логов инициализации Spring'a

    filter {
        includeTestsMatching "*SiteTest"
    }
}

testApi.dependsOn cleanDB
testApi.dependsOn copyTestDBData

//----------------------------------------------------------
//
//   Взаимосвязи между модулями
//
//----------------------------------------------------------
project(':services') {
    dependencies {
        compile project(':data')
        compile project(':image-processing')
        compile project(':connectors:connector-interface')
        compile project(':connectors:connector-local')
        compile project(':connectors:connector-google')
    }
}

project(':connectors:connector-local') {
    dependencies {
        compile project(':image-processing')
        compile project(':connectors:connector-interface')
    }
}

project(":image-processing") {
    dependencies {
        compile project(':connectors:connector-interface')
    }
}

project(':connectors:connector-google') {
    dependencies {
        compile project(':connectors:connector-interface')
    }
}



processTestResources {
    inputs.file new File('build.gradle')
    filesMatching('**/*.properties') {
        //println "   Test resources matched  \n1.  " + projectDir +"   \n2.   " + tmpDir
        filter ReplaceTokens, tokens: [
                "db.driver"         : testdbDriver,
                "db.vendor.platform": testdbVendorPlatform,
                "db.vendor.dbname"  : testdbVendorName,
                "db.url"            : testdbUrl,
                "db.name"           : testdbName,
                "db.params"         : testdbParams,
                "db.username"       : testdbUserName,
                "db.password"       : testdbUserPasswd,
                "db.generate"       : testdbGenerate,
                "database.type"     : dbType,
                "project.basedir"   : projectDir.toString(),
                "java.io.tmpdir"    : tmpDir
        ]
    }
}

//----------------------------------------------------------
//   Java compile options
//----------------------------------------------------------

sourceSets.main.java {
    exclude "**/server/*"

}

sourceSets {
    main.resources.srcDirs += "src/main/macos_specific"
}

sourceSets.test.java {
    exclude "**/server/*"
}

//----------------------------------------------------------
//   External libs
//----------------------------------------------------------

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://repo.spring.io/libs-snapshot" }
    maven {
        url "https://repository.apache.org/content/repositories/snapshots/"
    }
}

dependencies {
    compile project(':data')
	compile project(':connectors:connector-interface')
	compile project(':connectors:connector-local')
	compile project(':connectors:connector-google')
	compile project(':services')
    compile project(':image-processing')


    //compile group: 'org.apache.commons',  name: 'commons-imaging', version: '1.+'
    //compile group: 'org.apache.commons', name: 'commons-imaging', version: '1.0-R1534292'

    //   Special cases
    compile group: 'org.flywaydb', name: 'flyway-core', version: '4.1.2', force:true


	//	Springframework
    compile group: 'org.springframework', name: 'spring-core', version: "${props.springFrameworkVersion}", force:true
    compile group: 'org.springframework', name: 'spring-context', version: "${props.springFrameworkVersion}", force:true
    compile group: 'org.springframework', name: 'spring-webmvc', version: "${props.springFrameworkVersion}", force:true
    compile group: 'org.springframework', name: 'spring-beans', version: "${props.springFrameworkVersion}", force:true
    compile group: 'org.springframework', name: 'spring-aop', version: "${props.springFrameworkVersion}", force:true
    compile group: 'org.springframework', name: 'spring-jdbc', version: "${props.springFrameworkVersion}", force:true
    compile group: 'org.springframework', name: 'spring-orm', version: "${props.springFrameworkVersion}", force:true
    compile group: 'org.springframework', name: 'spring-tx', version: "${props.springFrameworkVersion}", force:true
    compile group: 'org.springframework', name: 'spring-web', version: "${props.springFrameworkVersion}", force:true

    //	Spring  boot
    compile group: 'org.springframework.boot', name: 'spring-boot', version: props.springBootVersion, force:true
    compile group: 'org.springframework.boot', name: 'spring-boot-starter', version: props.springBootVersion, force:true
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: props.springBootVersion, force:true
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-logging', version: props.springBootVersion, force:true

    compile group: 'org.springframework.boot', name: 'spring-boot-autoconfigure', version: props.springBootVersion, force:true
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-parent', version: props.springBootVersion, force:true
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-tomcat', version: props.springBootVersion, force:true
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: props.springBootVersion, force:true
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-integration', version: props.springBootVersion, force:true
    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat:${props.springBootVersion}")

    //	Spring  security
    compile group: 'org.springframework.security', name: 'spring-security-core', version: "${props.springSecurityVersion}"
    compile group: 'org.springframework.security', name: 'spring-security-web', version: "${props.springSecurityVersion}"
    compile group: 'org.springframework.security', name: 'spring-security-config', version: "${props.springSecurityVersion}"

    //	JSON Processing
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "${props.jacksonVersion}"
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "${props.jacksonVersion}"
    //	Testing
    //compile group: 'com.jayway.jsonpath', name: 'json-path', version: '2.2.0'
    testCompile group:  'org.codehaus.jackson', name: 'jackson-mapper-asl',version: '1.9.13'

    compile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
    compile group: 'org.springframework.hateoas', name: 'spring-hateoas', version: '0.23.0.RELEASE'

    //  HSQL DB
    compile group: 'org.hsqldb', name: 'hsqldb', version: '2.3.4'

    compile group: 'cglib', name: 'cglib', version: '3.2.5'

    compile group: 'jstl', name: 'jstl', version: '1.2'

    //  Auto REST documentation servlet - swager2
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.6.1'
    compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.6.1'


    //	Logging
	compile group: 'org.slf4j', name: 'slf4j-api', version: "${props.slf4jVersion}"
	compile group: 'org.slf4j', name: 'jcl-over-slf4j', version: "${props.slf4jVersion}"
	compile group: 'org.slf4j', name: 'log4j-over-slf4j', version: "${props.slf4jVersion}"
	compile group: 'ch.qos.logback', name: 'logback-classic', version: "${props.logbackVersion}"



    testCompile group: 'org.springframework.boot', name: 'spring-boot-test', version : props.springBootVersion, force:true
    testCompile group: 'org.springframework.boot', name: 'spring-boot-test-autoconfigure', version : props.springBootVersion, force:true

    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version:props.springBootVersion, force:true
	testCompile group: 'org.springframework', name: 'spring-test', version: "${props.springFrameworkVersion}", force:true
	testCompile group: 'junit', name: 'junit', version: "${props.junitVersion}"
	testCompile group: 'org.assertj', name: 'assertj-core', version: "${props.assertjVersion}"
	testCompile (group: 'org.dbunit', name: 'dbunit', version: "${props.dbunitVersion}") {
		exclude group:'junit',module:'junit' }
	testCompile group: 'com.github.springtestdbunit', name: 'spring-test-dbunit', version: '1.3.0'
}

//----------------------------------------------------------
//   Utils
//----------------------------------------------------------

subprojects.each { project ->
//
//    def projDepth =  project.configurations.compile.allDependencies.withType(ExternalDependency)
//    for ( projDep in  projDepth) {
//        println "${projDep.group} ${projDep.name}  ${projDep.version}"
//        //compile(group: projDep.getGroup(), name: projDep.getName(), version: projDep.getVersion())
//        //compile project(group: projDep.getGroup(), name: projDep.getGroup() configuration: 'schema')
//    }
//


//    def deps = project.configurations.compile.allDependencies.withType(ProjectDependency)
//    for ( dep in deps ) {
//        def projDepth =  dep.getDependencyProject().configurations.compile.allDependencies.withType(ExternalDependency)
//
//        for ( projDep in  projDepth) {
//            println "${projDep.group} ${projDep.name}  ${projDep.version}"
//            //compile(group: projDep.getGroup(), name: projDep.getName(), version: projDep.getVersion())
//            //compile project(group: projDep.getGroup(), name: projDep.getGroup() configuration: 'schema')
//        }
//    }



//    configure(project) {
//        task copyToLib {
//
//            def deps = project.configurations.compile.allDependencies.withType(ProjectDependency)
//            for ( dep in deps ) {
//                def projDepth =  dep.getDependencyProject().configurations.compile.allDependencies.withType(ExternalDependency)
//
//                for ( projDep in  projDepth) {
//                    println "${projDep.group} ${projDep.name}  ${projDep.version}"
//                    //compile(group: projDep.getGroup(), name: projDep.getName(), version: projDep.getVersion())
//                    //compile project(group: projDep.getGroup(), name: projDep.getGroup() configuration: 'schema')
//                }
//            }
//        }
//        //p.build.dependsOn(copyToLib)
//    }
}


