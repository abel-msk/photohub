import org.apache.tools.ant.filters.*
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'idea'

def propFile = new File("${rootProject.projectDir}/project.properties");
Properties props = new Properties()
props.load(new FileInputStream(propFile))

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'idea'
    group = 'home.abel.photohub'
    version = '0.1.0'
}
defaultTasks 'clean', 'build'

ext {
    group = "home.abel.photohub"
    version = "0.1.0"

    testdbDriver = 'org.hsqldb.jdbc.JDBCDriver'
    testdbVendorPlatform = 'org.eclipse.persistence.platform.database.HSQLPlatform'
    testdbVendorName = 'HSQL'
    testdbUrl        = 'jdbc:hsqldb:file:'
    testdbParams     = ''
    testdbGenerate   = 'false'
    testdbName       = System.getProperty('java.io.tmpdir') + "/ph-data/tb/photohub"
    testdbUserName   = 'photohub'
    testdbUserPasswd = 'photohub'
    tmpDir           = System.getProperty('java.io.tmpdir')
}

//----------------------------------------------------------
//   Assign db variaples to resources
//----------------------------------------------------------
processTestResources {
    filesMatching('**/*.properties') {
        filter ReplaceTokens, tokens: [
                "db.driver"         : testdbDriver,
                "db.vendor.platform": testdbVendorPlatform,
                "db.vendor.dbname"  : testdbVendorName,
                "db.url"            : testdbUrl,
                "db.params"         : testdbParams,
                "db.name"           : testdbName,
                "db.username"       : testdbUserName,
                "db.password"       : testdbUserPasswd,
                "db.generate"       : testdbGenerate,
                "project.basedir"   : projectDir.toString(),
                "java.io.tmpdir"    : tmpDir
        ]
    }
}

//----------------------------------------------------------
//   Tasks
//----------------------------------------------------------

task moduleJar(type: Jar) {
    from "${buildDir}/classes/main"
    from "${buildDir}/resources/main"
}

artifacts {
    archives moduleJar
}

test {
    inputs.dir project.sourceSets.main.java.srcDirs
    inputs.dir project.sourceSets.test.java.srcDirs
    inputs.dir project.sourceSets.test.resources.srcDirs

    doFirst {
        println "... Check and clean test DB = " + testdbName
        def testDBDir = new File(testdbName)
        testDBDir.getParentFile().deleteDir()
    }
    filter {
        includeTestsMatching "*PhotoServiceTest"
    }
}


//----------------------------------------------------------
//   DEPENDENCY
//----------------------------------------------------------
repositories {
    //mavenLocal()
    mavenCentral()
    maven {
        url "https://repository.apache.org/content/repositories/snapshots/"
    }
}

dependencies {
    compile project(':data')
    compile project(':image-processing')
    compile project(':connectors:connector-interface')
    compile project(':connectors:connector-local')
    compile project(':connectors:connector-google')

//    compile fileTree(dir: '../connectors/connector-interface/build/lib', include: '*.jar')
//    testCompile fileTree(dir: '../connectors/connector-interface/build/lib', include: '*.jar')
//    testCompile fileTree(dir: '../connectors/connector-local/build/lib', include: '*.jar')
//    testCompile fileTree(dir: '../connectors/connector-google/build/lib', include: '*.jar')

//    compile project(':connectors:connector-interface')
//    compile project(':connectors:connector-local')

	//  Springframework
	compile group: 'org.springframework', name: 'spring-core', version: "${props.springFrameworkVersion}"
	compile group: 'org.springframework', name: 'spring-context', version: "${props.springFrameworkVersion}"
	compile group: 'org.springframework', name: 'spring-beans', version: "${props.springFrameworkVersion}"
	compile group: 'org.springframework.security', name: 'spring-security-core', version: "${props.springSecurityVersion}"
    compile group: 'org.springframework.security', name: 'spring-security-crypto', version: "${props.springSecurityVersion}"

	//  JSON processing
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: "${props.jacksonVersion}"
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "${props.jacksonVersion}"

	//  Image processing
    compile group: 'com.twelvemonkeys.imageio', name: 'imageio-core', version: "3.2.1"
    compile group: 'com.github.jai-imageio', name: 'jai-imageio-core', version: "1.3.0"
    compile group: 'com.drewnoakes',  name: 'metadata-extractor', version: '2.10.1'
    compile group: 'org.apache.commons',  name: 'commons-imaging', version: '1.0-SNAPSHOT'

    compile group: 'com.fasterxml.uuid', name: 'java-uuid-generator', version: "3.1.3"
    compile group: 'org.apache.directory.studio', name: 'org.apache.commons.io', version: "2.4"
    compile group: 'commons-collections', name: 'commons-collections', version: "3.2.1"  //scope provided

    //  Logging
	compile group: 'org.slf4j', name: 'slf4j-api', version: "${props.slf4jVersion}"
	compile group: 'org.slf4j', name: 'jcl-over-slf4j', version: "${props.slf4jVersion}"
	compile group: 'org.slf4j', name: 'log4j-over-slf4j', version: "${props.slf4jVersion}"
	compile group: 'ch.qos.logback', name: 'logback-classic', version: "${props.logbackVersion}"

	//	Testing
	testCompile group: 'org.springframework', name: 'spring-test', version: "${props.springFrameworkVersion}"
	testCompile group: 'junit', name: 'junit', version: "${props.junitVersion}"
	testCompile group: 'org.assertj', name: 'assertj-core', version: '3.6.2'
	testCompile (group: 'org.dbunit', name: 'dbunit', version: "${props.dbunitVersion}") {
		exclude group:'junit',module:'junit' }
	testCompile group: 'com.github.springtestdbunit', name: 'spring-test-dbunit', version: '1.2.1'
}

