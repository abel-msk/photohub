import org.apache.tools.ant.filters.*
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: "com.ewerk.gradle.plugins.querydsl"
//   Doc: https://flywaydb.org/documentation/gradle/
//   apply plugin: "org.flywaydb.flyway"
//   Contact:  https://github.com/ewerk/gradle-plugins/issues
//   Alernate: https://gist.github.com/EdwardBeckett/5377401


def propFile = new File("${rootProject.projectDir}/project.properties");
Properties props = new Properties()
props.load(new FileInputStream(propFile))


println "Property springFrameworkVersion=" + props.springFrameworkVersion


ext {
    group="home.abel.photohub"
    version="0.1.0"

	javaSource= "${projectDir}/src/main/java"

	generatedSourcesDir = file("${projectDir}/src/querydsl/java")

    testdbDriver = 'org.hsqldb.jdbc.JDBCDriver'
    testdbVendorPlatform = 'org.eclipse.persistence.platform.database.HSQLPlatform'
    testdbVendorName = 'HSQL'
    testdbUrl = 'jdbc:hsqldb:file:'
    testdbParams = ''
	testdbGenerate = 'false'
    testdbName = System.getProperty('java.io.tmpdir') + "/ph-data/tb/photohub"
    testdbUserName = 'photohub'
    testdbUserPasswd = 'photohub'
}

idea {
    module {
        sourceDirs += generatedSourcesDir
    }
}

sourceSets {
    main {
        java {
            srcDir "${projectDir}/src/main/java"
            srcDir generatedSourcesDir
        }
    }
}

//https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.Test.html
test {
	inputs.dir new File("${projectDir}/src/main/java")
	inputs.dir project.sourceSets.test.java.srcDirs
	inputs.dir project.sourceSets.test.resources.srcDirs

    doFirst {
        println "... Check abd clean test DB = "+testdbName
        def testDBDir = new File(testdbName)
        testDBDir.getParentFile().deleteDir()
    }
	testLogging.showStandardStreams = true
}

//----------------------------------------------------------
//   QueryDSL processing
//----------------------------------------------------------
task cleanQueryDsl {
    FileTree tree = fileTree (dir: "${projectDir}/src/querydsl/java");
    tree.each { File file ->
        delete(file)
    }
}

compileQuerydsl.dependsOn(cleanQueryDsl)

querydsl {
    jpa=true
    querydslSourcesDir=generatedSourcesDir
}

//----------------------------------------------------------
//   Generate JAR
//----------------------------------------------------------
task moduleJar(type: Jar) {
    //from "${components.java}"
    from "${buildDir}/classes/main"
    from "${buildDir}/resources/main"
}

artifacts {
    archives moduleJar
}

//----------------------------------------------------------
//   Assign db variaples to resources
//----------------------------------------------------------
processTestResources {
	filesMatching('**/db-connector.properties') {
		filter ReplaceTokens, tokens: [
                "db.driver"         : testdbDriver,
                "db.vendor.platform": testdbVendorPlatform,
                "db.vendor.dbname"  : testdbVendorName,
                "db.url"            : testdbUrl,
                "db.params"         : testdbParams,
                "db.name"           : testdbName,
				"db.generate"       : testdbGenerate,
                "db.username"       : testdbUserName,
                "db.password"       : testdbUserPasswd
		]
	}
}

//----------------------------------------------------------
//   Dependent artifacts version
//----------------------------------------------------------
ext {

	//springFrameworkVersion="4.3.7.RELEASE"
	springFrameworkVersion="4.3.+"
	springSecurityVersion="4.1.4.RELEASE"
	springBootVersion="1.5.2.RELEASE"
	//springDataVersion="1.7.4.RELEASE"
	springDataVersion="1.11+"

	jacksonVersion="2.5.3"
	eclipselinkVersion="2.5.1"
	querydslVersion="4.1.+"

	//  Logging
	logbackVersion="1.1.3"
	slf4jVersion="1.7.7"

	//	Test
	junitVersion="4.12"
	assertjVersion="3.6.2"
	dbunitVersion="2.5.1"
}
	
//----------------------------------------------------------
//   DEPENDENCY
//----------------------------------------------------------

//buildscript {
//	repositories {
//		maven {
//			url "https://plugins.gradle.org/m2/"
//		}
//	}
//	dependencies {
//		classpath "gradle.plugin.com.boxfuse.client:flyway-release:4.1.2"
//	}
//}
//"${projectDir}/src/main/java"
repositories {
	flatDir {
		dirs "${rootProject.projectDir}/libs"
	}
	mavenLocal()
	mavenCentral()
}

dependencies {
	compile group: 'org.springframework', name: 'spring-core', version: "${props.springFrameworkVersion}"
	compile group: 'org.springframework', name: 'spring-context', version: "${props.springFrameworkVersion}"
	compile group: 'org.springframework', name: 'spring-beans', version: "${props.springFrameworkVersion}"
	compile group: 'org.springframework', name: 'spring-tx', version: "${props.springFrameworkVersion}"
	compile group: 'org.springframework', name: 'spring-jdbc', version: "${props.springFrameworkVersion}"
	compile group: 'org.springframework', name: 'spring-orm', version: "${props.springFrameworkVersion}"
	compile group: 'org.springframework.security', name: 'spring-security-core', version: "${props.springSecurityVersion}"
				
	//  DB Working
	compile group: 'org.hsqldb', name: 'hsqldb', version: '2.3.4'
	//compile group: 'org.hsqldb', name: 'hsqldb', version: '2.3.3'

	compile group: 'commons-dbcp', name: 'commons-dbcp', version: '1.4'
	compile group: 'commons-pool', name: 'commons-pool', version: '1.6'	
	compile group: 'commons-collections', name: 'commons-collections', version: '3.2.1'	
	compile group: 'org.springframework.data', name: 'spring-data-jpa', version: "${props.springDataVersion}"

	//  Persistance JPA
	compile (group: 'org.eclipse.persistence', name: 'eclipselink', version: "${props.eclipselinkVersion}") {
		exclude group:'org.eclipse.persistence',module:'commonj.sdo'}
	compile group: 'org.eclipse.persistence', name: 'javax.persistence', version: '2.1.0'

	//  Query DSL 4 libs
	compile group: 'com.querydsl', name: 'querydsl-root', version: "${props.querydslVersion}"
	compile group: 'com.querydsl', name: 'querydsl-jpa', version: "${props.querydslVersion}"
	compile group: 'com.querydsl', name: 'querydsl-apt', version: "${props.querydslVersion}"
	compile group: 'com.querydsl', name: 'querydsl-sql', version: "${props.querydslVersion}"

	//  DB Migration tools
	//  compile group: 'com.googlecode.flyway', name: 'flyway-core', version: '2.3.1'
	compile group: 'org.flywaydb', name: 'flyway-core', version: '4.1.2', force:true
	//compile group: 'org.flywaydb', name: 'flyway-core', version: '4.0.3'
	//compile group: 'org.flywaydb', name: 'flyway-core', version: '3.2.1'

	//  Misc
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: "${props.jacksonVersion}"
	compile group: 'javax.validation', name: 'validation-api', version: '1.1.0.Final'
	
	//	Logging
	compile group: 'org.slf4j', name: 'slf4j-api', version: "${props.slf4jVersion}"
	compile group: 'org.slf4j', name: 'jcl-over-slf4j', version: "${props.slf4jVersion}"
	compile group: 'org.slf4j', name: 'log4j-over-slf4j', version: "${props.slf4jVersion}"
	compile group: 'ch.qos.logback', name: 'logback-classic', version: "${props.logbackVersion}"

	//	Testing
	testCompile group: 'org.springframework', name: 'spring-test', version: "${props.springFrameworkVersion}"
	testCompile group: 'junit', name: 'junit', version: "${props.junitVersion}"
	testCompile group: 'org.assertj', name: 'assertj-core', version: '3.6.2'
	testCompile (group: 'org.dbunit', name: 'dbunit', version: "${props.dbunitVersion}") {
		exclude group:'junit',module:'junit' }
	testCompile group: 'com.github.springtestdbunit', name: 'spring-test-dbunit', version: '1.2.1'
}


buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
			//url "https://gradleware-plugins.s3.amazonaws.com/"
		}
	}
	dependencies {
		classpath "gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:1.0.8"
	}

//	flyway {
//
////		testdbName = System.getProperty('java.io.tmpdir') + "/ph-data/tb/photohub"
////		testdbUserName = 'photohub'
////		testdbUserPasswd = 'photohub'
//
//		url = "${testdbUrl}${testdbName}"
//		user = testdbUserName
//		password = testdbUserPasswd
////		schemas = ['schema1', 'schema2', 'schema3']
////		placeholders = [
////				'keyABC': 'valueXYZ',
////				'otherplaceholder': 'value123'
////		]
//	}

}
//
//publishing {
//	publications {
//		mavenJava(MavenPublication) {
//			from components.java
//			groupId "${project.group}"
//			artifactId "${project.name}"
//			version "${project.version}"
//
//		}
//	}
//}


publishing {
//    repositories {
//        maven {
//            mavenLocal()
//        }
//
//    }
//    mavenCustom(MavenPublication) {
//        pom.withXml {
//            asNode().appendNode('description',
//                    'A demonstration of maven POM customization')
//        }
//    }
//    publications {
//        mavenJava(MavenPublication) {
//            from

//        }
//    }
}


